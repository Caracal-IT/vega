/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';
import {
  Context,
} from './types/model/Context.model';

export namespace Components {
  interface RigelButton {
    'caption': string;
    'context': Context;
    'next': string;
  }
  interface RigelCheck {
    'caption': string;
    'checked': boolean;
  }
  interface RigelField {
    'caption': string;
    'context': Context;
    'next': string;
    'type': string;
    'value': string;
  }
  interface RigelHeader {
    'caption': string;
    'size': number;
  }
  interface RigelLabel {
    'caption': string;
  }
  interface RigelRadio {
    'caption': string;
    'checked': boolean;
    'group': string;
  }
}

declare global {


  interface HTMLRigelButtonElement extends Components.RigelButton, HTMLStencilElement {}
  var HTMLRigelButtonElement: {
    prototype: HTMLRigelButtonElement;
    new (): HTMLRigelButtonElement;
  };

  interface HTMLRigelCheckElement extends Components.RigelCheck, HTMLStencilElement {}
  var HTMLRigelCheckElement: {
    prototype: HTMLRigelCheckElement;
    new (): HTMLRigelCheckElement;
  };

  interface HTMLRigelFieldElement extends Components.RigelField, HTMLStencilElement {}
  var HTMLRigelFieldElement: {
    prototype: HTMLRigelFieldElement;
    new (): HTMLRigelFieldElement;
  };

  interface HTMLRigelHeaderElement extends Components.RigelHeader, HTMLStencilElement {}
  var HTMLRigelHeaderElement: {
    prototype: HTMLRigelHeaderElement;
    new (): HTMLRigelHeaderElement;
  };

  interface HTMLRigelLabelElement extends Components.RigelLabel, HTMLStencilElement {}
  var HTMLRigelLabelElement: {
    prototype: HTMLRigelLabelElement;
    new (): HTMLRigelLabelElement;
  };

  interface HTMLRigelRadioElement extends Components.RigelRadio, HTMLStencilElement {}
  var HTMLRigelRadioElement: {
    prototype: HTMLRigelRadioElement;
    new (): HTMLRigelRadioElement;
  };
  interface HTMLElementTagNameMap {
    'rigel-button': HTMLRigelButtonElement;
    'rigel-check': HTMLRigelCheckElement;
    'rigel-field': HTMLRigelFieldElement;
    'rigel-header': HTMLRigelHeaderElement;
    'rigel-label': HTMLRigelLabelElement;
    'rigel-radio': HTMLRigelRadioElement;
  }
}

declare namespace LocalJSX {
  interface RigelButton {
    'caption'?: string;
    'context'?: Context;
    'next'?: string;
  }
  interface RigelCheck {
    'caption'?: string;
    'checked'?: boolean;
  }
  interface RigelField {
    'caption'?: string;
    'context'?: Context;
    'next'?: string;
    'type'?: string;
    'value'?: string;
  }
  interface RigelHeader {
    'caption'?: string;
    'size'?: number;
  }
  interface RigelLabel {
    'caption'?: string;
  }
  interface RigelRadio {
    'caption'?: string;
    'checked'?: boolean;
    'group'?: string;
  }

  interface IntrinsicElements {
    'rigel-button': RigelButton;
    'rigel-check': RigelCheck;
    'rigel-field': RigelField;
    'rigel-header': RigelHeader;
    'rigel-label': RigelLabel;
    'rigel-radio': RigelRadio;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'rigel-button': LocalJSX.RigelButton & JSXBase.HTMLAttributes<HTMLRigelButtonElement>;
      'rigel-check': LocalJSX.RigelCheck & JSXBase.HTMLAttributes<HTMLRigelCheckElement>;
      'rigel-field': LocalJSX.RigelField & JSXBase.HTMLAttributes<HTMLRigelFieldElement>;
      'rigel-header': LocalJSX.RigelHeader & JSXBase.HTMLAttributes<HTMLRigelHeaderElement>;
      'rigel-label': LocalJSX.RigelLabel & JSXBase.HTMLAttributes<HTMLRigelLabelElement>;
      'rigel-radio': LocalJSX.RigelRadio & JSXBase.HTMLAttributes<HTMLRigelRadioElement>;
    }
  }
}


